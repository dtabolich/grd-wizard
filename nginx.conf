# Nginx reverse proxy configuration for Guardant License Wizard API
#
# Installation instructions:
#
# 1. Copy this file to your nginx sites directory:
#    - Ubuntu/Debian: sudo cp nginx.conf /etc/nginx/sites-available/grd-wizard
#    - CentOS/RHEL: sudo cp nginx.conf /etc/nginx/conf.d/grd-wizard.conf
#
# 2. Enable the site (Ubuntu/Debian only):
#    sudo ln -s /etc/nginx/sites-available/grd-wizard /etc/nginx/sites-enabled/
#
# 3. Test configuration:
#    sudo nginx -t
#
# 4. Reload nginx:
#    sudo systemctl reload nginx
#
# 5. Make sure your Node.js app is running on port 3000

server {
    listen 80;
    listen [::]:80;

    # Change this to your domain name or IP address
    server_name your-domain.com;

    # Logging
    access_log /var/log/nginx/grd-wizard-access.log;
    error_log /var/log/nginx/grd-wizard-error.log;

    # Max upload size (adjust based on your license file sizes)
    client_max_body_size 10M;

    # Proxy settings
    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;

        # WebSocket support (if needed in future)
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';

        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Disable caching
        proxy_cache_bypass $http_upgrade;
    }

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
}

# HTTPS configuration (optional, but recommended for production)
#
# To enable HTTPS:
# 1. Install certbot: sudo apt install certbot python3-certbot-nginx
# 2. Get certificate: sudo certbot --nginx -d your-domain.com
# 3. Certbot will automatically configure HTTPS for you
#
# Or manually add SSL configuration:
#
# server {
#     listen 443 ssl http2;
#     listen [::]:443 ssl http2;
#
#     server_name your-domain.com;
#
#     ssl_certificate /path/to/your/certificate.crt;
#     ssl_certificate_key /path/to/your/private.key;
#
#     # SSL configuration
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers HIGH:!aNULL:!MD5;
#     ssl_prefer_server_ciphers on;
#
#     # Same location block as above
#     location / {
#         proxy_pass http://localhost:3000;
#         # ... (rest of proxy settings)
#     }
# }
#
# # Redirect HTTP to HTTPS
# server {
#     listen 80;
#     listen [::]:80;
#     server_name your-domain.com;
#     return 301 https://$server_name$request_uri;
# }
